package one.inve.lfn.probe.core.snapshot;

import java.math.BigInteger;

import com.alibaba.fastjson.JSONObject;

import one.inve.bean.message.Contribution;
import one.inve.bean.message.SnapshotMessage;
import one.inve.bean.message.SnapshotPoint;
import one.inve.core.Config;
import one.inve.core.EventBody;
import one.inve.core.EventKeyPair;
import one.inve.lfn.probe.common.container.IContainerManager;
import one.inve.rocksDB.RocksJavaUtil;
import one.inve.service.SnapshotDbService;
import one.inve.util.StringUtils;
import one.inve.utils.DSA;

public class INVESnapshotManager {
	private ISnapshotState snapshotState = new ISnapshotState.Default();
	private IContainerManager containerManager;

	// Dbutils::detectAndRepairSnapshotData
	public void rebuildSnapshot(String dbId, int nValue, IContainerManager containerManager) {
		this.containerManager = containerManager;

		//@formatter:off
		//1. query hash via "select hash from messages_? where type = '3' order by id desc limit 1"
		//2. parse message into SnapshotMessage after fetching str by previous hash
		//@formatter:on
		SnapshotMessage snapshotMessage = SnapshotDbService.queryLatestSnapshotMessage(dbId);
		if (snapshotMessage != null) {
			snapshotState.setSnapshotMessage(snapshotMessage);
			snapshotState.getSnapshotPointMap().put(snapshotMessage.getSnapVersion(),
					snapshotMessage.getSnapshotPoint());
			snapshotState.getTreeRootMap().put(snapshotMessage.getSnapVersion(),
					snapshotMessage.getSnapshotPoint().getMsgHashTreeRoot());
			EventKeyPair pair = new EventKeyPair(snapshotMessage.getSnapshotPoint().getEventBody().getShardId(),
					snapshotMessage.getSnapshotPoint().getEventBody().getCreatorId(),
					snapshotMessage.getSnapshotPoint().getEventBody().getCreatorSeq());
//			logger.warn("node-({},{}) snap vers: {}, eb-{}, treeRoot: {}", node.getShardId(), node.getCreatorId(),
//					snapshotMessage.getSnapVersion(), pair.toString(),
//					snapshotMessage.getSnapshotPoint().getMsgHashTreeRoot());
		} else {
//			logger.warn("node-({},{}): LatestSnapshotMessage is null.", node.getShardId(), node.getCreatorId());
		}
		// 之前DEFAULT_SNAPSHOT_CLEAR_GENERATION个版本的快照
		SnapshotMessage sm = snapshotMessage;
		if (null != sm && StringUtils.isNotEmpty(sm.getPreHash())) {
			clearHistoryEventsBySnapshot(sm.getSnapVersion(), sm.getPreHash(), dbId, nValue, snapshotState);
		}

		for (int i = 0; i < Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION; i++) {
			if (snapshotMessage != null && StringUtils.isNotEmpty(snapshotMessage.getPreHash())) {
				snapshotMessage = SnapshotDbService.querySnapshotMessageByHash(dbId, snapshotMessage.getPreHash());
				snapshotState.getSnapshotPointMap().put(snapshotMessage.getSnapVersion(),
						snapshotMessage.getSnapshotPoint());
				snapshotState.getTreeRootMap().put(snapshotMessage.getSnapVersion(),
						snapshotMessage.getSnapshotPoint().getMsgHashTreeRoot());

//                logger.warn("node-({},{}) snap vers: {}, treeRoot: {}", node.getShardId(), node.getCreatorId(),
//                        snapshotMessage.getSnapVersion(), snapshotMessage.getSnapshotPoint().getMsgHashTreeRoot());
			} else {
				break;
			}
		}

	}

	/**
	 * 修复准备生成最新版本快照点需要的相关信息(已有的最新快照消息之后的数据)
	 * 
	 * @param node
	 */
	// GeneralNode::repairCurrSnapshotPointInfo
	private void repairCurrSnapshotPointInfo(int shardCount) throws InterruptedException {
		SnapshotPoint latestSnapshotPoint = calculateLatestSnapshotPoint();
		EventBody latestSnapshotPointEb = null;
		String latestSnapshotPointEbHash = null;
		EventKeyPair pair0 = null;
		if (latestSnapshotPoint != null) {
			latestSnapshotPointEb = latestSnapshotPoint.getEventBody();
			latestSnapshotPointEbHash = DSA.encryptBASE64(latestSnapshotPointEb.getHash());
			pair0 = new EventKeyPair(latestSnapshotPointEb.getShardId(), latestSnapshotPointEb.getCreatorId(),
					latestSnapshotPointEb.getCreatorSeq());
		}
//		logger.error("node-({}, {}): The latest snapshotPoint's {} eventBody-{} hash: {}", node.getShardId(),
//				node.getCreatorId(), node.getCurrSnapshotVersion().subtract(BigInteger.ONE),
//				null == pair0 ? null : pair0.toString(), latestSnapshotPointEbHash);

		// 模拟全排序线程，排序并恢复contribution
		EventBody[] events = new EventBody[shardCount];
		boolean statisFlag = false;
		int allSortEvtSize = 0;
		BigInteger transCount = BigInteger.valueOf(Config.CREATION_TX_LIST.size());
		BigInteger consEventCount = BigInteger.ZERO;
		int l = 0;
		int m = 0;

//		for (int i = 0; i < shardCount; i++) {
//			logger.info("node-({}, {}): ShardSortQueue-{} size = {}", node.getShardId(), node.getCreatorId(), i,
//					node.getShardSortQueue(i).size());
//		}
		while (true) {
			for (int i = 0; i < shardCount; i++) {
				if (null == events[i]) {
					events[i] = containerManager.getShardSortQueue(i).poll();
					l++;
				}

				if (i == shardCount - 1) {
					EventBody temp = events[0];
					for (int j = 0; j < events.length; j++) {
						if (temp == null || null == events[j]) {
//							logger.warn(
//									"node-({}, {}): evtSize={}, allSortEvtSize={}, forCalcuEvtSize={}, contribution size: {}",
//									node.getShardId(), node.getCreatorId(), l, allSortEvtSize, m,
//									node.getContributions().size());
//							logger.info("node-({}, {}): repaired msgHashTreeRoot = {}", node.getShardId(),
//									node.getCreatorId(), msgHashTreeRoot);
//							logger.info("node-({}, {}): repaired consEventCount = {}", node.getShardId(),
//									node.getCreatorId(), consEventCount);
//							logger.info("node-({}, {}): repaired transCount = {}", node.getShardId(),
//									node.getCreatorId(), transCount);
							return;
						} else if (events[j].getConsTimestamp().isBefore(temp.getConsTimestamp())) {
							// 共识时间戳小的event排在前面
							temp = events[j];
							events[j] = null;
						} else if (events[j].getConsTimestamp().equals(temp.getConsTimestamp())) {
							// 共识时间戳相同的，以分片号小的的event排在前面
							// 注意：同一个分片的2个共识Event的时间戳必然不相同，否则片内共识就失去意义
							if (temp.getShardId() > j) {
								temp = events[j];
								events[j] = null;
							}
						}
					}
					if (null != temp) {
						allSortEvtSize++;
						if (!statisFlag) {
							if (null == latestSnapshotPointEb) {
								// 从0开始，或者从最新快照消息的快照点Event开始
								statisFlag = true;
							} else {
								EventKeyPair pair = new EventKeyPair(temp.getShardId(), temp.getCreatorId(),
										temp.getCreatorSeq());
//                                logger.error("node-({}, {}): pair0: {}, pair: {}",
//                                        node.getShardId(), node.getCreatorId(), pair0.toString(), pair.toString());
								if (DSA.encryptBASE64(temp.getHash()).equals(latestSnapshotPointEbHash)) {
									// 从0开始，或者从最新快照消息的快照点Event开始
									statisFlag = true;
									transCount = latestSnapshotPointEb.getTransCount();
									consEventCount = latestSnapshotPointEb.getConsEventCount();
								} else {
									events[temp.getShardId()] = null;
									continue;
								}
							}
						}
						if (statisFlag) {
							EventKeyPair pair = new EventKeyPair(temp.getShardId(), temp.getCreatorId(),
									temp.getCreatorSeq());
							if (pair.equals(pair0)) {
								// 快照点Event滤掉
								events[temp.getShardId()] = null;
								continue;
							}
							m++;
							// 修复Contribution
							Contribution c = new Contribution.Builder().shardId(temp.getShardId())
									.creatorId(temp.getCreatorId()).otherId(temp.getOtherId())
									.otherSeq(temp.getOtherSeq()).build();
							node.getContributions().add(c);
							// 修复msgHashTreeRoot
							calculateMsgHashTreeRoot(temp);

							// 没来的及更新入库的共识Event及时入库
							consEventCount = consEventCount.add(BigInteger.ONE);
							node.setTotalConsEventCount(consEventCount);
							temp.setConsEventCount(node.getTotalConsEventCount());

							RocksJavaUtil rocksJavaUtil = new RocksJavaUtil(node.nodeParameters.dbId);
							if (temp.getTrans() != null) {
								transCount = transCount.add(BigInteger.valueOf(temp.getTrans().length));
								rocksJavaUtil.put(Config.EVT_TX_COUNT_KEY, transCount.toString());
//								logger.warn("node-({}, {}): update transCount: {}", node.getShardId(),
//										node.getCreatorId(), transCount);
							}
							temp.setTransCount(transCount);

							byte[] evtByte = rocksJavaUtil.get(pair.toString());
							if (null == evtByte) {
//								logger.error("node-({}, {}): missing event-{}", node.getShardId(), node.getCreatorId(),
//										pair.toString());
							} else {
								String evtStr = new String(evtByte);
								EventBody evt = JSONObject.parseObject(evtStr, EventBody.class);
								if (evt.getConsTimestamp() == null || evt.getConsTimestamp().toEpochMilli() <= 0) {
									rocksJavaUtil.put(pair.toString(), JSONObject.toJSONString(temp));
									rocksJavaUtil.put(Config.CONS_EVT_COUNT_KEY,
											node.getTotalConsEventCount().toString());
								} else if (!evt.getTransCount().equals(temp.getTransCount())) {
//									logger.error("node-({}, {}): event-{}'s transCount diff, calcu: {}, db: {} ",
//											node.getShardId(), node.getCreatorId(), pair.toString(),
//											temp.getTransCount(), evt.getTransCount());
									System.exit(-1);
								} else if (!evt.getConsEventCount().equals(temp.getConsEventCount())) {
//									logger.error("node-({}, {}): event-{}'s consEventCount diff, calcu: {}, db: {} ",
//											node.getShardId(), node.getCreatorId(), pair.toString(),
//											temp.getConsEventCount(), evt.getConsEventCount());
									System.exit(-1);
								}
							}

							// 没来的及解析入库的message继续入库
							if (transCount.compareTo(node.getConsMessageMaxId()) > 0) {
								int j = 1;
								int msgCount = temp.getTrans().length;
								for (byte[] msg : temp.getTrans()) {
									node.setConsMessageMaxId(node.getConsMessageMaxId().add(BigInteger.ONE));
									JSONObject o = new JSONObject();
									o.put("id", node.getConsMessageMaxId());
									o.put("eHash", DSA.encryptBASE64(temp.getHash()));
									o.put("eShardId", temp.getShardId());
									o.put("isStable", true);
									o.put("updateTime", temp.getConsTimestamp().toEpochMilli());
									o.put("msg", new String(msg));
									if (j++ == msgCount) {
										o.put("lastIdx", true);
									}

									try {
										node.getConsMessageVerifyQueue().put(o);
//										logger.warn("node-({}, {}): message into ConsMessageVerifyQueue, id: {}",
//												node.getShardId(), node.getCreatorId(), node.getConsMessageMaxId());
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
								}
							}

							// 没来的及生成的快照点及时生成快照点
							createSnapshotPoint(node, temp);
						}
						events[temp.getShardId()] = null;
					}
				}
			}
		}
	}

	/**
	 * 查询已有的最新快照消息的快照点
	 * 
	 * @param node
	 * @return SnapshotPoint
	 */
	private SnapshotPoint calculateLatestSnapshotPoint() {
		SnapshotPoint lastSnapshotPoint = null;
		if (null != snapshotState.getSnapshotPointMap() && null != snapshotState.getSnapshotPointMap()
				.get(snapshotState.getCurrSnapshotVersion().subtract(BigInteger.ONE))) {
			lastSnapshotPoint = snapshotState.getSnapshotPointMap()
					.get(snapshotState.getCurrSnapshotVersion().subtract(BigInteger.ONE));
		}
		return lastSnapshotPoint;
	}

	/**
	 * 清除当前快照vers之前第 Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION) 个快照的快照点之前的所有Event
	 * 
	 * @param vers 当前版本
	 */
	public static void clearHistoryEventsBySnapshot(BigInteger vers, String preHash, String dbId, int nValue,
			ISnapshotState snapshotState) {
		// 快照消息入库
		if (vers.compareTo(BigInteger.valueOf(Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION)) > 0) {
//            logger.warn("node-({},{}): start to clear history events", node.getShardId(), node.getCreatorId());
			// 查询之前第 Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION) 个快照
			int i = Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION - 1;
			while (i > 0) {
//                logger.warn("node-({}, {}): Generation: {}, i: {}, preHash: {}",
//                        node.getShardId(), node.getCreatorId(), Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION, i, preHash);
				if (StringUtils.isEmpty(preHash)) {
//                    logger.error("node-({}, {}): snapshot is null. can not delete events...",
//                            node.getShardId(), node.getCreatorId());
					break;
				} else {
					SnapshotMessage sm = SnapshotDbService.querySnapshotMessageByHash(dbId, preHash);
					if (null == sm) {
//                        logger.error("node-({}, {}): snapshot is null.", node.getShardId(), node.getCreatorId());
						break;
					}
					preHash = sm.getPreHash();
					i--;
					if (i == 0) {
						// 删除其快照点Event之前的所有Event
//                        logger.warn("node-({}, {}): clear event before snap version {}...",
//                                node.getShardId(), node.getCreatorId(), sm.getSnapVersion());
						SnapshotDbService.deleteEventsBeforeSnapshotPointEvent(dbId,
								sm.getSnapshotPoint().getEventBody(), nValue);
						// 清除之前版本的treeRootMap
						snapshotState.getTreeRootMap()
								.remove(vers.subtract(BigInteger.valueOf(Config.DEFAULT_SNAPSHOT_CLEAR_GENERATION)));
					}
				}
			}
//			if (logger.isDebugEnabled()) {
//				logger.debug("========= snapshot message version-{} delete events success.", vers);
//			}
		}
	}

}
