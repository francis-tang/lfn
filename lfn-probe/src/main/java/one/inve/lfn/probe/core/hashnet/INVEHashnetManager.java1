package one.inve.lfn.probe.core.hashnet;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSONObject;

import one.inve.bean.message.Contribution;
import one.inve.bean.message.SnapshotPoint;
import one.inve.core.Config;
import one.inve.core.Event;
import one.inve.core.EventBody;
import one.inve.core.EventKeyPair;
import one.inve.core.EventStore;
import one.inve.core.EventStoreImpl;
import one.inve.core.Hashnet;
import one.inve.lfn.probe.core.metrics.INVEMetrics;
import one.inve.lfn.probe.core.metrics.INVEMetricsManager;
import one.inve.node.Main;
import one.inve.rocksDB.RocksJavaUtil;
import one.inve.utils.DSA;

public class INVEHashnetManager {
	private static final Logger logger = LoggerFactory.getLogger("hashnet");

	// initialize these values after starting rebuilding
	private Hashnet hashnet;
	private int shardCount;
	private int nValue;

	/**
	 * There is a fact that we disregard snapshot mechanism which is necessary part
	 * in the whole rebuilding process.
	 * 
	 * <code>GeneralNode::reloadHashnet</code>
	 * 
	 * @return
	 */
	public void rebuildHashnet(String dbId, String rocksdbPath, int shardCount, int nValue, int shardId, int selfId) {

		this.shardCount = shardCount;
		this.nValue = nValue;

		INVEMetricsManager inveMetricsManager = new INVEMetricsManager(dbId, rocksdbPath);
		INVEMetrics metrics = inveMetricsManager.getMetrics();

		EventStore eventStore = new EventStoreImpl(shardCount, nValue, selfId);
		// Map<Integer, LinkedBlockingQueue<EventBody>> shardSortQueue = new
		// HashMap<>();

		this.hashnet = new Hashnet(shardCount, nValue);
		for (int i = 0; i < shardCount; i++) {
//			if (shardSortQueue.get(i) == null) {
//				LinkedBlockingQueue<EventBody> queueInstance = new LinkedBlockingQueue<>();
//				shardSortQueue.put(i, queueInstance);
//			}

			// 读取所有Event
			ArrayList<EventBody> events = new ArrayList<>();
			Iterator iter = new EventIterator<>(shardId, selfId, nValue, dbId);// "new EventIterator<>(shardId, selfId,
																				// n, node.nodeParameters.dbId);"
			while (iter.hasNext()) {
				EventBody eb = (EventBody) iter.next();
				events.add(eb);
			}
			Collections.shuffle(events);
			if (events.size() > 0) {
				events.sort(Comparator.comparing(EventBody::getGeneration));
//				logger.warn("node-({}, {}): reload event size: {}", node.getShardId(), node.getCreatorId(),
//						events.size());
			}
			events.forEach(e -> hashnet.addEvent(e));

			// 恢复共识Event全排序等待队列
//			Event[] evts = hashnet.getAllConsEvents(i);
//			for (Event evt : evts) {
//				node.getShardSortQueue(i)
//						.put(new EventBody.Builder().shardId(i).creatorId(evt.getCreatorId())
//								.creatorSeq(evt.getCreatorSeq()).otherId(evt.getOtherId()).otherSeq(evt.getOtherSeq())
//								.timeCreated(evt.getTimeCreated()).trans(evt.getTransactions())
//								.signature(evt.getSignature()).isFamous(evt.isFamous()).generation(evt.getGeneration())
//								.hash(evt.getHash()).consTimestamp(evt.getConsensusTimestamp()).build());
//			}

		}

		/**
		 * 修复准备生成最新版本快照点需要的相关信息
		 */
		repairCurrSnapshotPointInfo(node);
	}

	private EventBody[] getSortedEventBodiesByShard(int shardId) {
		// 恢复共识Event全排序等待队列
		Event[] evts = hashnet.getAllConsEvents(shardId);

		List<EventBody> eventBodiesInOneShard = Arrays.asList(evts).stream()
				.map(evt -> new EventBody.Builder().shardId(shardId).creatorId(evt.getCreatorId())
						.creatorSeq(evt.getCreatorSeq()).otherId(evt.getOtherId()).otherSeq(evt.getOtherSeq())
						.timeCreated(evt.getTimeCreated()).trans(evt.getTransactions()).signature(evt.getSignature())
						.isFamous(evt.isFamous()).generation(evt.getGeneration()).hash(evt.getHash())
						.consTimestamp(evt.getConsensusTimestamp()).build())
				.collect(Collectors.toList());

		return eventBodiesInOneShard.toArray(new EventBody[0]);

	}

	private void repairCurrSnapshotPointInfo(Main node) throws InterruptedException {
		SnapshotPoint latestSnapshotPoint = calculateLatestSnapshotPoint(node);
		EventBody latestSnapshotPointEb = null;
		String latestSnapshotPointEbHash = null;
		EventKeyPair pair0 = null;
		if (latestSnapshotPoint != null) {
			latestSnapshotPointEb = latestSnapshotPoint.getEventBody();
			latestSnapshotPointEbHash = DSA.encryptBASE64(latestSnapshotPointEb.getHash());
			pair0 = new EventKeyPair(latestSnapshotPointEb.getShardId(), latestSnapshotPointEb.getCreatorId(),
					latestSnapshotPointEb.getCreatorSeq());
		}
		logger.error("node-({}, {}): The latest snapshotPoint's {} eventBody-{} hash: {}", node.getShardId(),
				node.getCreatorId(), node.getCurrSnapshotVersion().subtract(BigInteger.ONE),
				null == pair0 ? null : pair0.toString(), latestSnapshotPointEbHash);

		// 模拟全排序线程，排序并恢复contribution
		EventBody[] events = new EventBody[shardCount];
		boolean statisFlag = false;
		int allSortEvtSize = 0;
		BigInteger transCount = BigInteger.valueOf(Config.CREATION_TX_LIST.size());
		BigInteger consEventCount = BigInteger.ZERO;
		int l = 0;
		int m = 0;

		for (int i = 0; i < shardCount; i++) {
			logger.info("node-({}, {}): ShardSortQueue-{} size = {}", node.getShardId(), node.getCreatorId(), i,
					node.getShardSortQueue(i).size());
		}
		while (true) {
			for (int i = 0; i < shardCount; i++) {
				if (null == events[i]) {
					events[i] = node.getShardSortQueue(i).poll();
					l++;
				}

				if (i == shardCount - 1) {
					EventBody temp = events[0];
					for (int j = 0; j < events.length; j++) {
						if (temp == null || null == events[j]) {
							logger.warn(
									"node-({}, {}): evtSize={}, allSortEvtSize={}, forCalcuEvtSize={}, contribution size: {}",
									node.getShardId(), node.getCreatorId(), l, allSortEvtSize, m,
									node.getContributions().size());
							logger.info("node-({}, {}): repaired msgHashTreeRoot = {}", node.getShardId(),
									node.getCreatorId(), msgHashTreeRoot);
							logger.info("node-({}, {}): repaired consEventCount = {}", node.getShardId(),
									node.getCreatorId(), consEventCount);
							logger.info("node-({}, {}): repaired transCount = {}", node.getShardId(),
									node.getCreatorId(), transCount);
							return;
						} else if (events[j].getConsTimestamp().isBefore(temp.getConsTimestamp())) {
							// 共识时间戳小的event排在前面
							temp = events[j];
							events[j] = null;
						} else if (events[j].getConsTimestamp().equals(temp.getConsTimestamp())) {
							// 共识时间戳相同的，以分片号小的的event排在前面
							// 注意：同一个分片的2个共识Event的时间戳必然不相同，否则片内共识就失去意义
							if (temp.getShardId() > j) {
								temp = events[j];
								events[j] = null;
							}
						}
					}
					if (null != temp) {
						allSortEvtSize++;
						if (!statisFlag) {
							if (null == latestSnapshotPointEb) {
								// 从0开始，或者从最新快照消息的快照点Event开始
								statisFlag = true;
							} else {
								EventKeyPair pair = new EventKeyPair(temp.getShardId(), temp.getCreatorId(),
										temp.getCreatorSeq());
//                                logger.error("node-({}, {}): pair0: {}, pair: {}",
//                                        node.getShardId(), node.getCreatorId(), pair0.toString(), pair.toString());
								if (DSA.encryptBASE64(temp.getHash()).equals(latestSnapshotPointEbHash)) {
									// 从0开始，或者从最新快照消息的快照点Event开始
									statisFlag = true;
									transCount = latestSnapshotPointEb.getTransCount();
									consEventCount = latestSnapshotPointEb.getConsEventCount();
								} else {
									events[temp.getShardId()] = null;
									continue;
								}
							}
						}
						if (statisFlag) {
							EventKeyPair pair = new EventKeyPair(temp.getShardId(), temp.getCreatorId(),
									temp.getCreatorSeq());
							if (pair.equals(pair0)) {
								// 快照点Event滤掉
								events[temp.getShardId()] = null;
								continue;
							}
							m++;
							// 修复Contribution
							Contribution c = new Contribution.Builder().shardId(temp.getShardId())
									.creatorId(temp.getCreatorId()).otherId(temp.getOtherId())
									.otherSeq(temp.getOtherSeq()).build();
							node.getContributions().add(c);
							// 修复msgHashTreeRoot
							calculateMsgHashTreeRoot(temp);

							// 没来的及更新入库的共识Event及时入库
							consEventCount = consEventCount.add(BigInteger.ONE);
							node.setTotalConsEventCount(consEventCount);
							temp.setConsEventCount(node.getTotalConsEventCount());

							RocksJavaUtil rocksJavaUtil = new RocksJavaUtil(node.nodeParameters.dbId);
							if (temp.getTrans() != null) {
								transCount = transCount.add(BigInteger.valueOf(temp.getTrans().length));
								rocksJavaUtil.put(Config.EVT_TX_COUNT_KEY, transCount.toString());
								logger.warn("node-({}, {}): update transCount: {}", node.getShardId(),
										node.getCreatorId(), transCount);
							}
							temp.setTransCount(transCount);

							byte[] evtByte = rocksJavaUtil.get(pair.toString());
							if (null == evtByte) {
								logger.error("node-({}, {}): missing event-{}", node.getShardId(), node.getCreatorId(),
										pair.toString());
							} else {
								String evtStr = new String(evtByte);
								EventBody evt = JSONObject.parseObject(evtStr, EventBody.class);
								if (evt.getConsTimestamp() == null || evt.getConsTimestamp().toEpochMilli() <= 0) {
									rocksJavaUtil.put(pair.toString(), JSONObject.toJSONString(temp));
									rocksJavaUtil.put(Config.CONS_EVT_COUNT_KEY,
											node.getTotalConsEventCount().toString());
								} else if (!evt.getTransCount().equals(temp.getTransCount())) {
									logger.error("node-({}, {}): event-{}'s transCount diff, calcu: {}, db: {} ",
											node.getShardId(), node.getCreatorId(), pair.toString(),
											temp.getTransCount(), evt.getTransCount());
									System.exit(-1);
								} else if (!evt.getConsEventCount().equals(temp.getConsEventCount())) {
									logger.error("node-({}, {}): event-{}'s consEventCount diff, calcu: {}, db: {} ",
											node.getShardId(), node.getCreatorId(), pair.toString(),
											temp.getConsEventCount(), evt.getConsEventCount());
									System.exit(-1);
								}
							}

							// 没来的及解析入库的message继续入库
							if (transCount.compareTo(node.getConsMessageMaxId()) > 0) {
								int j = 1;
								int msgCount = temp.getTrans().length;
								for (byte[] msg : temp.getTrans()) {
									node.setConsMessageMaxId(node.getConsMessageMaxId().add(BigInteger.ONE));
									JSONObject o = new JSONObject();
									o.put("id", node.getConsMessageMaxId());
									o.put("eHash", DSA.encryptBASE64(temp.getHash()));
									o.put("eShardId", temp.getShardId());
									o.put("isStable", true);
									o.put("updateTime", temp.getConsTimestamp().toEpochMilli());
									o.put("msg", new String(msg));
									if (j++ == msgCount) {
										o.put("lastIdx", true);
									}

									try {
										node.getConsMessageVerifyQueue().put(o);
										logger.warn("node-({}, {}): message into ConsMessageVerifyQueue, id: {}",
												node.getShardId(), node.getCreatorId(), node.getConsMessageMaxId());
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
								}
							}

							// 没来的及生成的快照点及时生成快照点
							createSnapshotPoint(node, temp);
						}
						events[temp.getShardId()] = null;
					}
				}
			}
		}
	}
}
